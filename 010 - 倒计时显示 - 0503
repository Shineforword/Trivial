1>一个工具类方法;
/**
*参数:
*startTime(开始倒计时时间)
*endTime(结束倒计时时间)
*deadTimeBlock(回调参数)
*/
/** .h文件中定义block*/
typedef void (^QYQDeadTimeBlock)(NSString * resultStr);
/** 对象方法实现*/
+ (void)getDeadTimeFromStartTime:(NSString *)startTime endTime:(NSString *)endTime withBlock:(QYQDeadTimeBlock)deadTimeBlock{
    //设置一个字符串的时间
    NSMutableString *datestring = [NSMutableString stringWithFormat:@"%@",startTime];
    NSDateFormatter * dm = [[NSDateFormatter alloc]init];
    //指定输出的格式   这里格式必须是和上面定义字符串的格式相同，否则输出空
    [dm setDateFormat:@"YYYY-MM-dd HH:mm:ss"];
    NSDate * newdate = [dm dateFromString:datestring];
    //服务器返回当前时间
    NSMutableString * nowDatestring = [NSMutableString stringWithFormat:@"%@",endTime];
    NSDate *nowDate = [dm dateFromString:nowDatestring];
    //获取时间差
    NSTimeInterval secondsBetweenDates= [newdate timeIntervalSinceDate:nowDate];
    
    __block int timeout = 60*15+secondsBetweenDates; // 倒计时时间60秒*15
    
    dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);
    dispatch_source_t _timer = dispatch_source_create(DISPATCH_SOURCE_TYPE_TIMER, 0, 0,queue);
    dispatch_source_set_timer(_timer,dispatch_walltime(NULL, 0),1.0*NSEC_PER_SEC, 0); //每秒执行
    
    dispatch_source_set_event_handler(_timer, ^{
        
        if(timeout<=0){ //倒计时结束，关闭
            dispatch_source_cancel(_timer);
            dispatch_async(dispatch_get_main_queue(), ^{
                //设置界面的按钮显示 根据自己需求设置
                deadTimeBlock(@"");
            });
        }else{
            int seconds = timeout % 61;
            int strTimeMinu = timeout/61;
            
            NSString *strTime = [NSString stringWithFormat:@"%.2d", seconds];
            dispatch_async(dispatch_get_main_queue(), ^{
                //设置界面的按钮显示 根据自己需求设置
                NSString * resultStr = [NSString stringWithFormat:@"请在剩余时间支付: %d:%@",strTimeMinu,strTime];
                deadTimeBlock(resultStr);
            });
            timeout--;
        }
    });
    dispatch_resume(_timer);

}
